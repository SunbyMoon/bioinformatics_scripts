#!/usr/bin/env python
# -*- coding: utf-8 -*-

from optparse import OptionParser
import os
import csv
from numpy  import *



__author__ = "Raony Guimarães"
__copyright__ = "Copyright 2012, Filter Analysis"
__credits__ = ["Raony Guimarães"]
__license__ = "GPL"
__version__ = "1.0.1"
__maintainer__ = "Raony Guimarães"
__email__ = "raonyguimaraes@gmail.com"
__status__ = "Production"
		
#run example
#python gatk.py -i alignment/exome.sorted.bam

parser = OptionParser()

parser.add_option("-a", dest="annovar_file",
                  help="CSV Generated by annovar", metavar="ANN")

(options, args) = parser.parse_args()

#annovar_file=




class FilterAnalysis:
  def __init__(self):
    print "Init"

  def main(self):
    print "Main"
    self.loadvariants()
    self.genes_in_both()
    self.filter_synonymous()
    self.genes_in_both()
    
    #self.filter_dbsnp()
    #self.genes_in_both()
    self.filter_1000g(threshold=0.05)
    self.genes_in_both()
    #self.filter_readdepth(threshold=10)
    #self.filter_sift(threshold=0.05)
    #self.filter_polyphen(threshold=0.85)
    #self.genes_in_both()
    ##self.filter_segdup()
    
    #self.filter_conserved_regions()
    
    
    
    #self.genes_in_both()
    self.save_filtered()
    
  def save_filtered(self):
    csv_file_variants = csv.writer(open('variants_filtered.csv', 'w'))
    vcf_file_variants = open('variants_filtered.vcf', 'w')
    csv_file_variants.writerow(self.header)
    #print self.variants_array[:,1]
    for variant in self.variants_array:
      gene_list = variant[1].split(';')
      flag = False
      for gene in gene_list:
	if gene in self.genes_in_both_list:
	  flag = True
	    
      if flag:
	csv_file_variants.writerow(variant)
	vcf_file_variants.writelines("\t".join(variant[-11:])+'\n')
	
	  
	    
	    #print variant[-11:]
      #variant
      
  def filter_sift(self, threshold):
    print "Filtering SIFT, threshold: %s" % (str(threshold))
    new_list = []
    for variant in self.variants_array:
      try:
	  frequency = float(variant[10])
      except:
	  frequency = 0
      if frequency < threshold:
	  new_list.append(variant)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    self.n_genes(self.variants_array)
  
  def filter_polyphen(self, threshold):
    print "Filtering Polyphen2, threshold > %s" % (str(threshold))
    new_list = []
    for variant in self.variants_array:
      try:
	  frequency = float(variant[11])
      except:
	  frequency = 1
      if frequency > threshold:
	  new_list.append(variant)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    self.n_genes(self.variants_array)
  
  def filter_segdup(self):
    print "Filter: Remove Variants in regions of Segmental Duplication:"
    new_list = []
    for variant in self.variants_array:
      if variant[5] == '':
	new_list.append(variant)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    self.n_genes(self.variants_array)
    
    
    
  def filter_conserved_regions(self):
    print "Filter: Remove Variants not in Conserved Regions:"
    new_list = []
    for variant in self.variants_array:
      if variant[4] != '':
	new_list.append(variant)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    self.n_genes(self.variants_array)
      
    
  def filter_readdepth(self, threshold):
    print "Filtering Read Depth, threshold: %s" % (str(threshold))
    new_list = []
    for variant in self.variants_array:
      rd_one = threshold
      rd_two = threshold
      if variant[-1] != '.':
	genotype = variant[-1].split(':')
	if len(genotype) > 1:
	  #print genotype
	  rd_one = int(genotype[2])
      if variant[-2] != '.':
	genotype = variant[-2].split(':')
	if len(genotype) > 1:
	  rd_two = int(genotype[2])
      #check depth of both!!!
      if (rd_one >= threshold) and (rd_two >= threshold):
	new_list.append(variant)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    self.n_genes(self.variants_array)
  
  def genes_in_both(self):
    new_list = []
    genes_first_individual = []
    genes_second_individual = []
    self.genes_in_both_list = []
    exclude_list = ['0/0', '0|0', './.']
    for variant in self.variants_array:
      if (variant[-2] != '.') and (variant[-2].split(':')[0] not in exclude_list):
	genes_first_individual.append(variant[1])
    
    for variant in self.variants_array:
      if (variant[-1] != '.') and (variant[-1].split(':')[0] not in exclude_list):
	genes_second_individual.append(variant[1])

    genes_second_individual = self.clear_gene_list(genes_second_individual)
    genes_first_individual = self.clear_gene_list(genes_first_individual)

    for gene in genes_first_individual:
      if gene in genes_second_individual:
	self.genes_in_both_list.append(gene)
    
    print "Genes in Both: %s" % len(self.genes_in_both_list)
    if len(self.genes_in_both_list) < 20 :
      print self.genes_in_both_list
      
  def clear_gene_list(self, gene_list):
    new_gene_list = []
    for gene in gene_list:
      if len(gene.split(';')) > 1:
	for item in gene.split(';'):
	  new_gene_list.append(item)
      else:
	new_gene_list.append(gene)

    gene_list = set(new_gene_list)
    return gene_list
      
    
  def filter_1000g(self,threshold):
    print "Filtering 1000genomes, threshold: %s" % (str(threshold))
    new_list = []
    for variant in self.variants_array:
      try:
	  frequency = float(variant[6])
      except:
	  frequency = 0
      if frequency < threshold:
	  new_list.append(variant)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    self.n_genes(self.variants_array)
    
  def filter_dbsnp(self):
    print "Filtering dbSNP 135"
    new_list = []
    for variant in self.variants_array:
      #print variant[22]
      #die() and variant[22] == '.'
      if variant[9] == '':
	new_list.append(variant)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    
  def filter_synonymous(self):
    print "Filtering synonymous"
    new_list = []
    for variant in self.variants_array:
      if variant[2] != 'synonymous SNV':
	new_list.append(variant)
    #print len(new_list)
    self.variants_array = array(new_list)
    print self.variants_array.shape
    
    
  def loadvariants(self):
    annovar_file = csv.reader(open(options.annovar_file, "rb"))
    self.header = annovar_file.next()
    #print header
    self.variants_array = array(list(annovar_file))
    #print self.variants_array.shape
    print "Initial Variants:%s Columns:%s " % (self.variants_array.shape)
    self.n_genes(self.variants_array)
    
    
  def n_genes(self, variants_array):
    genes = set(variants_array[:,1])

    gene_list = []
    for gene in genes:
      if len(gene.split(';')) > 1:
	for item in gene.split(';'):
	  gene_list.append(item)
      else:
	gene_list.append(gene)

    gene_list = set(gene_list)

    print "Number of Genes: %s " % (len(gene_list))
    return gene_list


if __name__ == "__main__":
    analysis = FilterAnalysis()
    analysis.main()



