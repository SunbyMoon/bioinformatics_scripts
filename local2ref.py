import os
Release = 67
from cogent.db.ensembl import HostAccount, Genome
from cogent import LoadSeqs, DNA, PROTEIN
#print PROTEIN.Alphabet

aminoacid_table = {'A': ['GCT', 'GCC', 'GCA', 'GCG'],
		   'C': ['TGT', 'TGC'],
		   'D': ['GAT', 'GAC'],
		   'E': ['GAA', 'GAG'],
		   'F': ['TTT', 'TTC'],
		   'G': ['GGT', 'GGC', 'GGA', 'GGG'],
		   'H': ['CAT', 'CAC'],
		   'I': ['ATT', 'ATC', 'ATA'],
		   'K': ['AAA', 'AAG'],
		   'L': ['TTA', 'TTG', 'CTT', 'CTC', 'CTA', 'CTG'],
		   'M': ['ATG'],
		   'N': ['AAT', 'AAC'],
		   'P': ['CCT', 'CCC', 'CCA', 'CCG'],
		   'Q': ['CAA', 'CAG'],
		   'R': ['CGT', 'CGC', 'CGA', 'CGG', 'AGA', 'AGG'],
		   'S': ['TCT', 'TCC', 'TCA', 'TCG', 'AGT', 'AGC'],
		   'T': ['ACT', 'ACC', 'ACA', 'ACG'],
		   'U': ['UAA', 'UGA', 'UAG'], #stopcodons, not sure
		   'V': ['GTT', 'GTC', 'GTA', 'GTG'],
		   'W': ['TGG'],
		   'Y': ['TAT', 'TAC'],
		   }

def find_codon_index(protein_A, codon_A, protein_B):
  result = {}
  print protein_A, codon_A, protein_B
  print aminoacid_table[protein_A]
  print aminoacid_table[protein_B]
  
  most_similar_codon_index = ''
  similarity = 3
  #for each codon in protein B, get the codon with the smallest difference with codon_A  
  for codon in aminoacid_table[protein_B]:
    index_codon = aminoacid_table[protein_B].index(codon)
    #print index_codon
    
    #for each letter of codon
    codon_difference = 0
    if codon[0] != codon_A[0]:
      codon_difference += 1
    if codon[1] != codon_A[1]:
      codon_difference += 1
    if codon[2] != codon_A[2]:
      codon_difference += 1
    #print codon_difference
      
    if codon_difference < similarity:
      similarity = codon_difference
      most_similar_codon_index = index_codon
      #minor_index = index_codon
  print similarity
  print most_similar_codon_index
  codon_B = aminoacid_table[protein_B][most_similar_codon_index]
  print codon_B
  #get chaging index
  if codon_B[0] != codon_A[0]:
    codon_index = 1
  if codon_B[1] != codon_A[1]:
    codon_index = 2
  if codon_B[2] != codon_A[2]:
    codon_index = 3
  result['codon_index'] = codon_index
  result['codon_B'] = codon_B
  return result
  
if 'ENSEMBL_ACCOUNT' in os.environ:
    host, username, password = os.environ['ENSEMBL_ACCOUNT'].split()
    account = HostAccount(host, username, password)
else:
    account = None

protein_mutation = 'A203T'
protein_A = protein_mutation[0]
protein_B = protein_mutation[-1]
codon_index = int(protein_mutation[1:-1])


#result = find_codon_index(protein_A, 'GCA', protein_B)
#print result

    
human = Genome(Species='human', Release=Release, account=account)
print human

#seqs = {'original' : 'A',
	#'mutation' : 'T'
	#}
#protein =  LoadSeqs(data = seqs, moltype = PROTEIN)
#print protein.getTranslation()

#protein = 'METSASATASEKQEAKSGILEAAGFPDPGKKASPLVVAAAAAAAVAAQGVPQHLLPPFHAPLPIDMRHQEGRYHYEPHSVHGVHGPPALSGSPVISDISLIRLSPHPAGPGESPFNAPHPYVNPHMEHYLRSVHSSPTLSMISAARGLSPADVAQEHLKERGLFGLPAPGTTPSDYYHQMTLVAGHPAPYGDLLMQSGGAASAPHLHDYLNPVDVSRFSSPRVTPRLSRKRALSISPLSDASLDLQRMIRTSPNSLVAYINNSRSSSAASGSYGHLSAGALSPAFTFPHPINPVAYQQILSQQRGLGSAFGHTPPLIQPSPTFLAQQPMALTSINATPTQLSSSSNCLSDTNQNKQSSESAVSSTVNPVAIHKRSKVKTEPEGLRPASPLALTQGQVSGHGSCGCALPLSQEQLADLKEDLDRDDCKQEAEVVIYETNCHWEDCTKEYDTQEQLVHHINNEHIHGEKKEFVCRWQACTREQKPFKAQYMLVVHMRRHTGEKPHKCTFEGCSKAYSRLENLKTHLRSHTGEKPYVCEHEGCNKAFSNASDRAKHQNRTHSNEKPYICKIPGCTKRYTDPSSLRKHVKTVHGPDAHVTKKQRNDVHLRTPLLKENGDSEAGTEPGGPESTEASSTSQAVEDCLHVRAIKTESSGLCQSSPGAQSSCSSEPSPLGSAPNNDSGVEMPGTGPGSLGDLTALDDTPPGADTSALAAPSAGGLQLRKHMTTMHRFEQLKKEKLKSLKDSCSWAGPTPHTRNTKLPPLPGSGSILENFSGSGGGGPAGLLPNPRLSELSASEVTMLSQLQERRDSSTSTVSSAYTVSRRSSGISPYFSSRRSSEASPLGAGRPHNASSADSYDPISTDASRRSSEASQCSGGSGLLNLTPAQQYSLRAKYAAATGGPPPTPLPGLERMSLRTRLALLDAPERTLPAGCPRPLGPRRGSDGPTYGHGHAGAAPAFPHEAPGGGARRASDPVRRPDALSLPRVQRFHSTHNVNPGPLPPCADRRGLRLQSHPSTDGGLARGAYSPRPPSISENVAMEAVAAGVDGAGPEADLGLPEDDLVLPDDVVQYIKAHASGALDEGTGQVYPTESTGFSDNPRLPSPGLHGQRRMVAADSNVGPSAPMLGGCQLGFGAPSSLNKNNMPVQWNEVSSGTVDALASQVKPPPFPQGNLAVVQQKPAFGQYPGYSPQGLQASPGGLDSTQPHLQPRSGAPSQGIPRVNYMQQLRQPVAGSQCPGMTTTMSPHACYGQVHPQLSPSTISGALNQFPQSCSNMPAKPGHLGHPQQTEVAPDPTTMGNRHRELGVPDSALAGVPPPHPVQSYPQQSHHLAASMSQEGYHQVPSLLPARQPGFMEPQTGPMGVATAGFGLVQPRPPLEPSPTGRHRGVRAVQQQLAYARATGHAMAAMPSSQETAEAVPKGAMGNMGSVPPQPPPQDAGGAPDHSMLYYYGQIHMYEQDGGLENLGSCQVMRSQPPQPQACQDSIQPQPLPSPGVNQVSSTVDSQLLEAPQIDFDAIMDDGDHSSLFSGALSPSLLHSLSQNSSRLTTPRNSLTLPSIPAGISNMAVGDMSSMLTSLAEESKFLNMMT'
#print len(protein)
#cds = 'ATGGAGACGTCTGCCTCAGCCACTGCCTCCGAGAAGCAAGAAGCCAAAAGTGGGATCCTGGAGGCCGCTGGCTTCCCCGACCCGGGTAAAAAGGCCTCTCCTTTGGTGGTGGCTGCAGCGGCAGCAGCAGCGGTAGCTGCCCAAGGAGTGCCGCAGCATCTCTTGCCACCATTCCATGCGCCCCTACCGATTGACATGCGACACCAGGAAGGAAGGTACCATTACGAGCCTCATTCTGTCCACGGTGTGCACGGGCCCCCTGCCCTCAGCGGCAGCCCTGTCATCTCTGACATCTCCTTGATCCGGCTTTCCCCGCACCCGGCTGGCCCTGGGGAGTCCCCCTTCAACGCCCCCCACCCGTACGTGAACCCCCACATGGAGCACTACCTCCGTTCTGTGCACAGCAGCCCCACGCTCTCCATGATCTCTGCAGCCAGGGGCCTCAGCCCCGCTGATGTGGCCCAGGAGCACCTTAAGGAGAGGGGACTGTTTGGCCTTCCTGCTCCAGGCACCACCCCCTCAGACTATTACCACCAGATGACCCTCGTGGCAGGCCACCCCGCGCCCTACGGGGACCTGCTGATGCAGAGCGGGGGCGCTGCCAGCGCACCCCATCTCCACGACTACCTCAACCCCGTGGACGTGTCCCGTTTCTCCAGCCCGCGGGTGACGCCCCGCCTGAGCCGCAAGCGGGCGCTGTCCATCTCCCCACTCTCAGACGCCAGCCTGGACCTGCAGCGGATGATCCGCACCTCACCCAACTCGCTAGTGGCCTACATCAACAACTCCCGAAGCAGCTCGGCGGCCAGCGGTTCCTACGGGCATCTGTCAGCGGGTGCCCTCAGCCCAGCCTTCACCTTCCCCCACCCCATCAACCCCGTGGCCTACCAGCAGATTCTGAGCCAGCAGAGGGGTCTGGGGTCAGCCTTTGGACACACACCACCCCTGATCCAGCCCTCACCCACCTTCCTGGCCCAGCAGCCCATGGCCCTCACCTCCATCAATGCCACGCCCACCCAGCTCAGCAGCAGCAGCAACTGTCTGAGTGACACCAACCAGAACAAGCAGAGCAGTGAGTCGGCCGTCAGCAGCACCGTCAACCCTGTCGCCATTCACAAGCGCAGCAAGGTCAAGACCGAGCCTGAGGGCCTGCGGCCGGCCTCCCCTCTGGCGCTGACGCAGGGCCAGGTGTCTGGACACGGCTCATGTGGGTGTGCCCTTCCCCTCTCCCAGGAGCAGCTGGCTGACCTCAAGGAAGATCTGGACAGGGATGACTGTAAGCAGGAGGCTGAGGTGGTCATCTATGAGACCAACTGCCACTGGGAAGACTGCACCAAGGAGTACGACACCCAGGAGCAGCTGGTGCATCACATCAACAACGAGCACATCCACGGGGAGAAGAAGGAGTTTGTGTGCCGCTGGCAGGCCTGCACGCGGGAGCAGAAGCCCTTCAAGGCGCAGTACATGCTGGTGGTGCACATGCGGCGACACACGGGCGAGAAGCCCCACAAGTGCACGTTCGAGGGCTGCTCGAAGGCCTACTCCCGCCTGGAGAACCTGAAGACACACCTGCGGTCCCACACCGGGGAGAAGCCATATGTGTGTGAGCACGAGGGCTGCAACAAAGCCTTCTCCAACGCCTCGGACCGCGCCAAGCACCAGAATCGCACCCACTCCAACGAGAAACCCTACATCTGCAAGATCCCAGGCTGCACCAAGAGATACACAGACCCCAGCTCTCTCCGGAAGCATGTGAAAACGGTCCACGGCCCAGATGCCCACGTCACCAAGAAGCAGCGCAATGACGTGCACCTCCGCACACCGCTGCTCAAAGAGAATGGGGACAGTGAGGCCGGCACGGAGCCTGGCGGCCCAGAGAGCACCGAGGCCAGCAGCACCAGCCAGGCCGTGGAGGACTGCCTGCACGTCAGAGCCATCAAGACCGAGAGCTCCGGGCTGTGTCAGTCCAGCCCCGGGGCCCAGTCGTCCTGCAGCAGCGAGCCCTCTCCTCTGGGCAGTGCCCCCAACAATGACAGTGGCGTGGAGATGCCGGGGACGGGGCCCGGGAGCCTGGGAGACCTGACGGCACTGGATGACACACCCCCAGGGGCCGACACCTCAGCCCTGGCTGCCCCCTCCGCTGGTGGCCTCCAGCTGCGCAAACACATGACCACCATGCACCGGTTCGAGCAGCTCAAGAAGGAGAAGCTCAAGTCACTCAAGGATTCCTGCTCATGGGCCGGGCCGACTCCACACACGCGGAACACCAAGCTGCCTCCCCTCCCGGGAAGTGGCTCCATCCTGGAAAACTTCAGTGGCAGTGGGGGCGGCGGGCCCGCGGGGCTGCTGCCGAACCCGCGGCTGTCGGAGCTGTCCGCGAGCGAGGTGACCATGCTGAGCCAGCTGCAGGAGCGCCGCGACAGCTCCACCAGCACGGTCAGCTCGGCCTACACCGTGAGCCGCCGCTCCTCCGGCATCTCCCCCTACTTCTCCAGCCGCCGCTCCAGCGAGGCCTCGCCCCTGGGCGCCGGCCGCCCGCACAACGCGAGCTCCGCTGACTCCTACGACCCCATCTCCACGGACGCGTCGCGGCGCTCGAGCGAGGCCAGCCAGTGCAGCGGCGGCTCCGGGCTGCTCAACCTCACGCCGGCGCAGCAGTACAGCCTGCGGGCCAAGTACGCGGCAGCCACTGGCGGCCCCCCGCCCACTCCGCTGCCGGGCCTGGAGCGCATGAGCCTGCGGACCAGGCTGGCGCTGCTGGACGCGCCCGAGCGCACGCTGCCCGCCGGCTGCCCACGCCCACTGGGGCCGCGGCGTGGCAGCGACGGGCCGACCTATGGCCACGGCCACGCGGGGGCTGCGCCCGCCTTCCCCCACGAGGCTCCAGGCGGCGGAGCCAGGCGGGCCAGCGACCCTGTGCGGCGGCCCGATGCCCTGTCCCTGCCGCGGGTGCAGCGCTTCCACAGCACCCACAACGTGAACCCCGGCCCGCTGCCGCCCTGTGCCGACAGGCGAGGCCTCCGCCTGCAGAGCCACCCGAGCACCGACGGCGGCCTGGCCCGCGGCGCCTACTCGCCCCGGCCGCCTAGCATCAGCGAGAACGTGGCGATGGAGGCCGTGGCGGCAGGAGTGGACGGCGCGGGGCCCGAGGCCGACCTGGGGCTGCCGGAGGACGACCTGGTGCTTCCAGACGACGTGGTGCAGTACATCAAGGCGCACGCCAGTGGCGCTCTGGACGAGGGCACCGGGCAGGTGTATCCCACGGAAAGCACTGGCTTCTCTGACAACCCCAGACTACCCAGCCCGGGGCTGCACGGCCAGCGCAGGATGGTGGCTGCGGACTCCAACGTGGGCCCCTCCGCCCCTATGCTGGGAGGATGCCAGTTAGGCTTTGGGGCGCCCTCCAGCCTGAACAAAAATAACATGCCTGTGCAGTGGAATGAGGTGAGCTCCGGCACCGTAGACGCCCTGGCCAGCCAGGTGAAGCCTCCACCCTTTCCTCAGGGCAACCTGGCGGTGGTGCAGCAGAAGCCTGCCTTTGGCCAGTACCCGGGCTACAGTCCGCAAGGCCTACAGGCTAGCCCTGGGGGCCTGGACAGCACGCAGCCACACCTGCAGCCCCGCAGCGGAGCCCCCTCCCAGGGCATCCCCAGGGTAAACTACATGCAGCAGCTGCGACAGCCAGTGGCAGGCAGCCAGTGTCCTGGCATGACTACCACTATGAGCCCCCATGCCTGCTATGGCCAAGTCCACCCCCAGCTGAGCCCCAGCACCATCAGTGGGGCCCTCAACCAGTTCCCCCAATCCTGCAGCAACATGCCAGCCAAGCCAGGGCATCTGGGGCACCCTCAGCAGACAGAAGTGGCACCTGACCCCACCACGATGGGCAATCGCCACAGGGAACTTGGGGTCCCCGATTCAGCCCTGGCTGGAGTGCCACCACCTCACCCAGTCCAGAGCTACCCACAGCAGAGCCATCACCTGGCAGCCTCCATGAGCCAGGAGGGCTACCACCAGGTCCCCAGCCTTCTGCCTGCCCGCCAGCCTGGCTTCATGGAGCCCCAAACAGGCCCGATGGGGGTGGCTACAGCAGGCTTTGGCCTAGTGCAGCCCCGGCCTCCCCTCGAGCCCAGCCCCACTGGCCGCCACCGTGGGGTACGTGCTGTGCAGCAGCAGCTGGCCTACGCCAGGGCCACAGGCCATGCCATGGCTGCCATGCCGTCCAGTCAGGAAACAGCAGAGGCTGTGCCCAAGGGAGCGATGGGCAACATGGGGTCGGTGCCTCCCCAGCCGCCTCCGCAGGACGCAGGTGGGGCCCCGGACCACAGCATGCTCTACTACTACGGCCAGATCCACATGTACGAACAGGATGGAGGCCTGGAGAACCTCGGGAGCTGCCAGGTCATGCGGTCCCAGCCACCACAGCCACAGGCCTGTCAGGACAGCATCCAGCCCCAGCCCTTGCCCTCACCAGGGGTCAACCAGGTGTCCAGCACTGTGGACTCCCAGCTCCTGGAGGCCCCCCAGATTGACTTCGATGCCATCATGGATGATGGCGATCACTCGAGTTTGTTCTCGGGTGCTCTGAGCCCCAGCCTCCTCCACAGCCTCTCCCAGAACTCCTCCCGCCTCACCACCCCCCGAAACTCCTTGACCCTGCCCTCCATCCCCGCAGGCATCAGCAACATGGCTGTCGGGGACATGAGCTCCATGCTCACCAGCCTCGCCGAGGAGAGCAAGTTCCTGAACATGATGACCTAG'
#my_seq = DNA.makeSequence(cds,'gli2')
#seq = my_seq.withoutTerminalStopCodon()
#pep = seq.getTranslation()
#print pep.toFasta()
#codons = my_seq.getInMotifSize(3)
#print codons
##pep = my_seq.getTranslation()
#print pep
#print len(pep)


#brca1 = human.getGeneByStableId(StableId='ENSG00000012048')
#print brca1.Description

genes = human.getGenesMatching(Symbol='gli2')
for gene in genes:
  if gene.Symbol.lower() == 'gli2':
    break
#print gene
#print len(gene)
#print brca2.Symbol
#print brca2.Description
#print brca2
location = str(gene.Location).split(':')
chromossome = location[-3]
start = location[-2].split('-')[0]
end = location[-2].split('-')[1]
print chromossome, start, end


#print 'protein seq'
protein = gene.CanonicalTranscript.ProteinSeq
#print len(protein)
#print 'cds seq'
cds = gene.CanonicalTranscript.Cds
length = len(cds)
print length
trunc_cds = cds[: length - (length % 3)]
print trunc_cds
die()
#print len(cds)
exons = []
for exon in gene.CanonicalTranscript.Exons:
  location = str(exon.Location).split(':')
  start = location[-2].split('-')[0]
  end = location[-2].split('-')[1]
  print len(exon.Seq)
  
  
  exon_transcript = {}
  exon_transcript['start'] = int(start)
  exon_transcript['end'] = int(end)
  exons.append(exon_transcript)
  
#print exons
#die()

#print protein
#print cds
codons = cds.getInMotifSize(3)
codon = codons[codon_index-1]
#A203T protein[202], because of 0 index of python array
print codons[codon_index-2], codons[codon_index-1], codons[codon_index-0]
print protein[codon_index-1]
#die()

result = find_codon_index(protein_A, codon, protein_B)

#index_codon, codon_index examples 203, position 1
def local2ref(exons, index_codon, codon_index):
  protein_position = index_codon
  #print exons, index_codon, codon_index
  if codon_index == 1:
    cds_position = 3*index_codon - 2
  elif codon_index == 2:
    cds_position = 3*index_codon - 1
  else:
    cds_position = 3*index_codon
  print cds_position
  
  cds_count = 0
  for exon in exons:
    exon_lenght = (exon['end'] - exon['start'])
    cds_count_initial = cds_count
    cds_count += exon_lenght
    print exon
    print cds_position, cds_count, cds_count_initial, exon_lenght
    
    if cds_position <= cds_count:
      #codon is inside this exon
      print 'found exon'
      print exon
      print cds_position, cds_count, cds_count_initial
      
      x = cds_position - cds_count_initial
      genomic_postion = exon['start'] + x
      print genomic_postion
      #exon_codon_index = index_codon - codon_count_original
      #print exon_codon_index
      #genomic_postion = exon['start'] + 3*exon_codon_index
      #print genomic_postion
      break
      


local2ref(exons, codon_index, result['codon_index'])
die()
#transcript = brca2.Transcripts[0]

#print protein[202], protein[203], protein[204]
#print brca2.getCdsLengths()
#longest = brca2.getLongestCdsTranscript()
#print longest.Cds
